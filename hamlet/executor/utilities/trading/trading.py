__author__ = "MarkusDoepfert"__credits__ = ""__license__ = ""__maintainer__ = "MarkusDoepfert"__email__ = "markus.doepfert@tum.de"# This file is in charge of the trading strategy for the markets# Importsimport osimport pandas as pdimport polars as plimport numpy as npimport timeimport loggingimport tracebackfrom datetime import datetimefrom hamlet.executor.utilities.forecasts.forecaster import Forecasterfrom hamlet.executor.utilities.controller.controller import Controllerfrom hamlet.executor.utilities.database.database import Databasefrom hamlet.executor.utilities.trading.strategies import *from hamlet import constants as cfrom pprint import pprintclass Trading:    def __init__(self, strategy: str = c.MTS_RETAILER, **kwargs):        self.kwargs = kwargs        # Mapping of controller types to classes        strategies = {            c.MTS_ZI: Zi,            c.MTS_LINEAR: Linear,            c.MTS_RETAILER: Retailer,        }        # Lookup the class based on the controller_type        self.strategy = strategies.get(strategy.lower())        if self.strategy is None:            raise ValueError(f'Trading strategy {strategy} not available. \n'                             f'The available methods are: {strategies.keys()}. \n'                             f'If you think this is an error, you might have forgotten to import the method to the '                             f'class or named it incorrectly.')    def create_instance(self):        return self.strategy(**self.kwargs)